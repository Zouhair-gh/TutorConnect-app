trigger:
  branches:
    include:
      - main

  paths:
    exclude:
      - README.md


pool:
  vmImage: 'ubuntu-latest'

variables:
  # Backend variables
  javaVersion: '17'
  mavenPomFile: 'pom.xml'
  buildConfiguration: 'Release'
  backendArtifactName: 'TutorConnect'
  
  # Frontend variables
  nodeVersion: '18.x'
  frontendDirectory: 'tutorconnectfrontend'
  frontendArtifactName: 'tutorconnect-frontend'
  
  # General
  isMainBranch: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
- stage: BuildBackend
  displayName: 'Build and Test Backend'
  jobs:
  - job: BuildAndTestBackend
    displayName: 'Java Spring Boot Backend'
    steps:
    # Set up JDK
    - task: JavaToolInstaller@0
      displayName: 'Set up JDK $(javaVersion)'
      inputs:
        versionSpec: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    
    # Maven Cache
    - task: Cache@2
      displayName: 'Cache Maven packages'
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
        path: $(MAVEN_CACHE_FOLDER)
    
    # Maven Build
    - task: Maven@3
      displayName: 'Maven Build'
      inputs:
        mavenPomFile: '$(mavenPomFile)'
        goals: 'clean package'
        options: '-B -DskipTests'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '$(javaVersion)'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
        publishJUnitResults: false

    # Run Unit Tests
    - task: Maven@3
      displayName: 'Run Unit Tests'
      inputs:
        mavenPomFile: '$(mavenPomFile)'
        goals: 'test'
        options: '-B'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '$(javaVersion)'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
        publishJUnitResults: true
        testResultsFiles: '/surefire-reports/TEST-*.xml'
        codeCoverageToolOption: 'JaCoCo'
        codeCoverageClassFilter: '+:ma.TutorConnect.'
    
    # Code Coverage Report
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage'
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)//site/jacoco/jacoco.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)//site/jacoco'
        failIfCoverageEmpty: true
    
    # Create backend package with Spring Boot Maven plugin
    - task: Maven@3
      displayName: 'Package Spring Boot Application'
      inputs:
        mavenPomFile: '$(mavenPomFile)'
        goals: 'package spring-boot:repackage'
        options: '-DskipTests'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '$(javaVersion)'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
    
    # Publish backend artifacts
    - task: CopyFiles@2
      displayName: 'Copy JAR to Artifact Staging Directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/target'
        Contents: '*.jar'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/backend'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Backend Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/backend'
        ArtifactName: '$(backendArtifactName)'
        publishLocation: 'Container'

- stage: BuildFrontend
  displayName: 'Build and Test Frontend'
  jobs:
  - job: BuildAndTestFrontend
    displayName: 'React Frontend'
    steps:
    # Set up Node.js
    - task: NodeTool@0
      displayName: 'Install Node.js $(nodeVersion)'
      inputs:
        versionSpec: '$(nodeVersion)'
    
    # Cache npm packages
    - task: Cache@2
      displayName: 'Cache npm packages'
      inputs:
        key: 'npm | "$(Agent.OS)" | $(frontendDirectory)/package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: '$(frontendDirectory)/node_modules'
    
    # Install dependencies
    - script: |
        cd $(frontendDirectory)
        npm ci
      displayName: 'Install npm dependencies'
    
    # Run linting if ESLint is configured
    - script: |
        cd $(frontendDirectory)
        if [ -f package.json ] && grep -q "eslint" package.json; then
          npm run lint
        else
          echo "ESLint not found in package.json, skipping linting"
        fi
      displayName: 'Run ESLint (if configured)'
      continueOnError: true
    
    # Run frontend tests
    - script: |
        cd $(frontendDirectory)
        npm test -- --passWithNoTests
      displayName: 'Run frontend tests'
      continueOnError: true  # In case tests are not set up yet
    
    # Build frontend
    - script: |
        cd $(frontendDirectory)
        npm run build
      displayName: 'Build frontend'
    
    # Publish frontend artifacts
    - task: CopyFiles@2
      displayName: 'Copy frontend build files'
      inputs:
        sourceFolder: '$(frontendDirectory)/build'
        contents: '/*'
        targetFolder: '$(Build.ArtifactStagingDirectory)/frontend'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish frontend artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/frontend'
        artifactName: '$(frontendArtifactName)'
        publishLocation: 'Container'

- stage: DeployDev
  displayName: 'Deploy to Development'
  dependsOn: 
    - BuildBackend
    - BuildFrontend
  condition: and(succeeded(), eq(variables.isMainBranch, true))
  jobs:
  - job: DeployBackendToDev
    displayName: 'Deploy Spring Boot Backend to Dev'
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(backendArtifactName)'
        downloadPath: '$(System.ArtifactsDirectory)/backend'
          
    - script: |
        echo "Deploying Java Spring Boot backend to Dev Environment"
        # Example deployment steps - customize as needed
        # For Azure App Service:
        # - task: AzureWebApp@1
        #   inputs:
        #     azureSubscription: 'your-azure-subscription'
        #     appType: 'webAppLinux'
        #     appName: 'tutorconnect-api-dev'
        #     package: '$(System.ArtifactsDirectory)/backend/*.jar'
        #     runtimeStack: 'JAVA|17'  
      displayName: 'Deploy Java Backend'
            
  - job: DeployFrontendToDev
    displayName: 'Deploy React Frontend to Dev'
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(frontendArtifactName)'
        downloadPath: '$(System.ArtifactsDirectory)/frontend'
          
    - script: |
        echo "Deploying React frontend to Dev Environment"
        # Example deployment steps - customize as needed
        # For Azure Static Web App:
        # - task: AzureStaticWebApp@0
        #   inputs:
        #     azureSubscription: 'your-azure-subscription'
        #     appName: 'tutorconnect-web-dev'
        #     workingDirectory: '$(System.ArtifactsDirectory)/frontend'
      displayName: 'Deploy React Frontend'