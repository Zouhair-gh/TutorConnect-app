name: CI Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-test:
    name: Test Spring Boot Backend
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: tutor_connect
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=30s
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Test with Maven
        run: mvn -B test
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/tutor_connect
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: root

  frontend-build:
    name: Build React Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd tutorconnectfrontend
          npm install
          npm install react-router-dom axios
      
      - name: Build production bundle
        run: CI=false npm run build
        working-directory: tutorconnectfrontend
        env:
          NODE_OPTIONS: --openssl-legacy-provider

  docker-build-verify:
    name: Verify Docker Builds
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build backend image
        run: docker build -t backend .
      
      - name: Build frontend image
        run: docker build -t frontend ./tutorconnectfrontend

  docker-compose-test:
    name: Test Docker Compose
    runs-on: ubuntu-latest
    needs: docker-build-verify
    steps:
      - uses: actions/checkout@v3
      
      # Installation fiable de Docker Compose V2
      - name: Install Docker Compose
        run: |
          sudo mkdir -p /usr/local/lib/docker/cli-plugins
          sudo curl -SL "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64" -o /usr/local/lib/docker/cli-plugins/docker-compose
          sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
          docker compose version
      
      # Alternative: Utilisation de l'action officielle
      # - name: Set up Docker Compose
      #   uses: docker/setup-buildx-action@v2
      #   with:
      #     install-compose: true
      #     compose-version: "v2.24.5"
      
      - name: Verify Docker Compose installation
        run: docker compose version
      
      - name: Start containers
        run: docker compose up -d --build
      
      - name: Wait for backend to start
        run: |
          echo "Waiting for backend to start..."
          timeout 180 bash -c 'until docker compose logs backend 2>&1 | grep "Started TutorConnectApplication"; do sleep 10; echo "Still waiting..."; done'
      
      - name: Verify MySQL connection
        run: |
          echo "Checking MySQL connection..."
          timeout 60 bash -c 'until docker compose exec -T mysql mysql -uroot -proot -e "SELECT 1"; do sleep 5; echo "Waiting for MySQL..."; done'
      
      - name: Check container status
        run: docker compose ps -a
      
      - name: Verify backend health (internal check)
        run: |
          docker compose exec -T backend curl -f http://localhost:8080/actuator/health || \
          (echo "Health check failed. Container logs:" && docker compose logs && exit 1)
      
      - name: Collect diagnostics
        if: always()
        run: |
          mkdir -p diagnostics
          docker compose logs > diagnostics/full.log
          docker compose logs backend > diagnostics/backend.log
          docker compose logs mysql > diagnostics/mysql.log
          docker compose ps -a > diagnostics/containers.txt
          docker compose images > diagnostics/images.txt
      
      - name: Upload diagnostics
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: docker-diagnostics
          path: diagnostics/
      
      - name: Stop containers
        if: always()
        run: docker compose down -v --remove-orphans
