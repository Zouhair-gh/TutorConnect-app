name: TutorConnect CI/CD
on:
  push:
    branches:
      - dev_maaroufi
      - dev_marouane
      - dev_zouhair
      - main
env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18.x'
  FRONTEND_DIR: 'tutorconnectfrontend'
  BACKEND_DIR: '.' # ou 'tutorconnectbackend' si c'est un sous-dossier
  
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build & Test All Components
    
 
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: tutor_connect
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
    steps:
    
      - name: Checkout repository
        uses: actions/checkout@v3
        
 
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      
      - name: Create application.properties for CI
        run: |
          mkdir -p ${{ env.BACKEND_DIR }}/src/main/resources
          cat > ${{ env.BACKEND_DIR }}/src/main/resources/application.properties << EOF
          spring.application.name=TutorConnect
          
   
          spring.datasource.url=jdbc:mysql://localhost:3306/tutor_connect?createDatabaseIfNotExist=true
          spring.datasource.username=root
          spring.datasource.password=root
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
          
        
          spring.jpa.hibernate.ddl-auto=update
          spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
          
      
          jwt.secret=MySuperSecretKeyWithAtLeast32CharactersLong12345678901234567890
          jwt.expiration=86400000
          
       
          server.port=8080
          
          spring.jpa.show-sql=true
          spring.main.allow-bean-definition-overriding=true
          logging.level.org.springframework.web=INFO
          logging.level.ma.tutorconnect=INFO
          
          # Temporary file path for CI environment
          file.upload-dir=/tmp/uploads
          EOF
          

      - name: Build backend with Maven
        run: mvn -f ${{ env.BACKEND_DIR }}/pom.xml clean package -DskipTests
        
      - name: Run backend tests
        run: mvn -f ${{ env.BACKEND_DIR }}/pom.xml test
        

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Build React frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          npm install
          npm run build
          

      - name: Build Docker image for backend
        run: |
          mkdir -p docker-backend
          cp ${{ env.BACKEND_DIR }}/target/*.jar docker-backend/app.jar
          cat > docker-backend/Dockerfile <<'EOF'
          FROM openjdk:17-slim
          VOLUME /tmp
          COPY app.jar app.jar
          ENTRYPOINT ["java", "-jar", "/app.jar"]
          EOF
          docker build -t tutorconnect-backend:latest docker-backend
          docker save tutorconnect-backend:latest -o backend-image.tar
   
      - name: Build Docker image for frontend
        run: |
          mkdir -p docker-frontend
          cp -r ${{ env.FRONTEND_DIR }}/build/* docker-frontend/
          cat > docker-frontend/Dockerfile <<'EOF'
          FROM nginx:alpine
          COPY . /usr/share/nginx/html
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          EOF
          docker build -t tutorconnect-frontend:latest docker-frontend
          docker save tutorconnect-frontend:latest -o frontend-image.tar
          
      - name: Upload backend JAR artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-jar
          path: ${{ env.BACKEND_DIR }}/target/*.jar
          
      - name: Upload frontend build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ${{ env.FRONTEND_DIR }}/build
          
      - name: Upload backend Docker image
        uses: actions/upload-artifact@v3
        with:
          name: backend-docker-image
          path: backend-image.tar
          
      - name: Upload frontend Docker image
        uses: actions/upload-artifact@v3
        with:
          name: frontend-docker-image
          path: frontend-image.tar
          
      - name: Verify artifacts
        run: |
          echo "✅ Backend JAR: $(ls ${{ env.BACKEND_DIR }}/target/*.jar)"
          echo "✅ Frontend built files: $(ls ${{ env.FRONTEND_DIR }}/build | wc -l) files"
          echo "✅ Docker images saved: backend-image.tar, frontend-image.tar"
